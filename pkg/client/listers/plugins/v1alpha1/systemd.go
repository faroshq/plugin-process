/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/faroshq/plugin-process/pkg/apis/plugins/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SystemdLister helps list Systemds.
// All objects returned here must be treated as read-only.
type SystemdLister interface {
	// List lists all Systemds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Systemd, err error)
	// Systemds returns an object that can list and get Systemds.
	Systemds(namespace string) SystemdNamespaceLister
	SystemdListerExpansion
}

// systemdLister implements the SystemdLister interface.
type systemdLister struct {
	indexer cache.Indexer
}

// NewSystemdLister returns a new SystemdLister.
func NewSystemdLister(indexer cache.Indexer) SystemdLister {
	return &systemdLister{indexer: indexer}
}

// List lists all Systemds in the indexer.
func (s *systemdLister) List(selector labels.Selector) (ret []*v1alpha1.Systemd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Systemd))
	})
	return ret, err
}

// Systemds returns an object that can list and get Systemds.
func (s *systemdLister) Systemds(namespace string) SystemdNamespaceLister {
	return systemdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SystemdNamespaceLister helps list and get Systemds.
// All objects returned here must be treated as read-only.
type SystemdNamespaceLister interface {
	// List lists all Systemds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Systemd, err error)
	// Get retrieves the Systemd from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Systemd, error)
	SystemdNamespaceListerExpansion
}

// systemdNamespaceLister implements the SystemdNamespaceLister
// interface.
type systemdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Systemds in the indexer for a given namespace.
func (s systemdNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Systemd, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Systemd))
	})
	return ret, err
}

// Get retrieves the Systemd from the indexer for a given namespace and name.
func (s systemdNamespaceLister) Get(name string) (*v1alpha1.Systemd, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("systemd"), name)
	}
	return obj.(*v1alpha1.Systemd), nil
}
